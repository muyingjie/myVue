1、有些方法名字实在太普通了，例如error，hasOwn，这些方法会不会与其他库冲突？
2、计算属性中返回新生成的对象或数组，这个对象或数组中不会加监听
3、计算属性中不可以用async、await

组件注册
initAssetRegisters
组件使用
resolveAsset
在mergeOptions的过程中，将会取出父组件注册的全局组件，merge到子组件上，这样子组件就可以用到这些全局组件
components在合并过程中调用的合并策略函数是mergeAssets


  function cached (fn) {
    var cache = Object.create(null);
    return (function cachedFn (str) {
      var hit = cache[str];
      return hit || (cache[str] = fn(str))
    })
  }

  var genStaticKeysCached = cached(genStaticKeys$1);

  // 会调用很多次
  function optimize (root, options) {
    if (!root) { return }
    isStaticKey = genStaticKeysCached(options.staticKeys || '');
    isPlatformReservedTag = options.isReservedTag || no;
    // first pass: mark all non-static nodes.
    markStatic$1(root);
    // second pass: mark static roots.
    markStaticRoots(root, false);
  }

  function genStaticKeys$1 (keys) {
    return makeMap(
      'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +
      (keys ? ',' + keys : '')
    )
  }

组件化思路：
组件即一类相似展示形式的dom元素集合，既然要组件化，我们就需要给这堆元素集合做一个标记，这样在父组件中引用这个标记，即认为是对这个组件的调用

每个组件被实例化，展示在页面当中时经历的主要过程：
1、初始化组件内的变量，将其变为响应式的 initData initProps
2、生成vnode树
3、根据vnode树生成dom节点
4、更新响应式数据时，vnode树变化，对应的dom也更新

问题：
1、页面组件化之后，开发人员只需要实例化最外层的根组件，其余组件要在什么时候实例化？
一定是父组件在实例化的过程中遇到需要加载的子组件，才去实例化，而非把所有用到的组件全都实例化

根组件和其他组件的差别：根组件有el

defineReactive的过程中，给每个响应式变量定义一个数组，$mount的时候原型上定义一个updateComponent方法，在defineReactive中不断收集这些方法，这样可不可以？

案例集合：
1、作用域插槽：付费弹框的标题部分，dc2、ebs、slb都是包月的，eip是按量计费的
2、子组件不可以修改属性：弹框组件，弹框是否显示的属性在父级定义，传给子级后子级内部的取消按钮点击时不可以直接改这个值，而要$emit通知父级修改，还有分页组件，组件内部翻一页，外部也希望拿到这个页码去发请求
3、用ref直接修改子组件变量或调子组件方法：每个创建页都需要勾选是否同意退款规则，是否勾选、显示警告文字两个变量放在了CreateFooterFrame组件中而并没有作为父级传给子级的属性，因为组件内需要更改这两个变量的值，但父级在点击创建时也要检测是否勾选“同意退款规则”，如果没勾选还要将警告文字展示，此时就需要用ref取到子级对象直接修改其变量

